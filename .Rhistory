print(head(fusioncovar))
library(psych)
describe(head(fusion0))
describe(head(fusiongroup))
describe(head(fusioncovar))
library(stringr)
library(ggplot2)
library(lme4)
plot_weights(fusion0, model0.rob)
plot_weights(fusioncovar, model_covar.rob)
plot_weights(fusioncovar, model_covar.rob, select.var=c("item.color","group"))
plot_weights(fusioncovar, model_covar.rob, select.var=c("item.color","covar"))
plot_weights(fusioncovar, model_covar.rob, select.var=c("subject","group"))
data_Stroop_RT <- data_Stroop_RT%>%
mutate(RT = ifelse(RT > 200, RT, NA))
med_RT <- median(data_Stroop_RT$RT, na.rm = T)
moy_RT <- mean(data_Stroop_RT$RT, na.rm = T)
ggplot(data_Stroop_RT, aes(x = RT))+
geom_density(fill = "dodgerblue", alpha = 0.3, size = 1)+
geom_vline(xintercept = med_RT, linetype = 2)+
geom_vline(xintercept = moy_RT)+
theme_minimal()+
labs(title = "Distribution of the RT variable")
args(clean.sd)
clean.sd(df.var.val = fusiongroup$RT, #ERREUR Erreur dans if (df.var.group == "none") { : la condition est de longueur > 1
df.var.group = fusiongroup$group,
n.sd = 1.5,
data = fusiongroup,
fill = NA)
fusiongroup$RT_clean <- clean.val
fusiongroup$removed <- 0
fusiongroup[is.na(fusiongroup$RT_clean),]$removed <- 1
ggplot(fusiongroup,aes(x=W_e,y=RT, group=subject,color=factor(removed)))+
facet_wrap(.~item.color)+
geom_point()
ggplot(fusiongroup,aes(x=W_subject,y=RT, group=subject,color=factor(removed)))+
facet_wrap(.~item.color)+
geom_point()
rm(clean.val)
med_RT <- median(fusiongroup$RT_clean, na.rm = T)
moy_RT <- mean(fusiongroup$RT_clean, na.rm = T)
ggplot(fusiongroup, aes(x = RT_clean))+
geom_density(fill = "dodgerblue", alpha = 0.3, size = 1)+
geom_vline(xintercept = med_RT, linetype = 2)+
geom_vline(xintercept = moy_RT)+
theme_minimal()+
labs(title = "Distribution of the RT variable")
fusiongroup%>%
filter(group == "20_30")%>%
ggplot(aes(x = subject, y = RT))+
geom_boxplot()+
theme_minimal()+
labs(title = "Boxplot showing the differences in RT among subjects - young adults group")+
theme(axis.text.x = element_text(angle = 45))
clean.subj.group(subj.var = subject,
RT.var = RT_clean,
N.sd = 2,
data = fusiongroup,
groupping = TRUE,
group.var = group)
which_to_remove <- clean.subj.group(subj.var = subject,
RT.var = RT_clean,
N.sd = 2,
data = fusiongroup,
groupping = TRUE,
group.var = group)
exp_plots_LMM(data = fusiongroup,
DV = fusiongroup$RT_clean,
ID = fusiongroup$subject,
class = fusiongroup$item.color)
model0 <- lmer(RT ~ group + (1|subject)+(1|item.color), data = fusiongroup)
model0_clean <- lmer(RT_clean ~ group + (1|subject)+(1|item.color), data = fusiongroup)
model0.rob <- rlmer(RT ~ group + (1|subject)+(1|item.color), data = fusiongroup)
compare(model0.rob,model0,model0_clean)
library(knitr)
library(NPL)
citation("NPL")
library(readxl)
data_Stroop_RT <- read_excel("data_Stroop_RT.xlsx")
data_Stroop_RT$trigger <- as.character(data_Stroop_RT$trigger) # To fcilitate the analyses
data_Stroop_RT$group <- as.character(data_Stroop_RT$group)# To fcilitate the analyses
str(data_Stroop_RT)
library(dplyr)
data_Stroop_RT <- data_Stroop_RT%>%
mutate(RT = ifelse(RT > 200, RT, NA))
library(ggplot2)
med_RT <- median(data_Stroop_RT$RT, na.rm = T)
moy_RT <- mean(data_Stroop_RT$RT, na.rm = T)
ggplot(data_Stroop_RT, aes(x = RT))+
geom_density(fill = "dodgerblue", alpha = 0.3, size = 1)+
geom_vline(xintercept = med_RT, linetype = 2)+
geom_vline(xintercept = moy_RT)+
theme_minimal()+
labs(title = "Distribution of the RT variable")
args(clean.sd)
clean.sd(df.var.val = data_Stroop_RT$RT,
df.var.group = data_Stroop_RT$group,
n.sd = 1.5,
data = data_Stroop_RT,
fill = NA)
data_Stroop_RT$RT_clean <- clean.val
rm(clean.val)
str(data_Stroop_RT)
med_RT <- median(data_Stroop_RT$RT_clean, na.rm = T)
moy_RT <- mean(data_Stroop_RT$RT_clean, na.rm = T)
ggplot(data_Stroop_RT, aes(x = RT_clean))+
geom_density(fill = "dodgerblue", alpha = 0.3, size = 1)+
geom_vline(xintercept = med_RT, linetype = 2)+
geom_vline(xintercept = moy_RT)+
theme_minimal()+
labs(title = "Distribution of the RT variable")
data_Stroop_RT%>%
filter(group == "20_30")%>%
ggplot(aes(x = subject, y = RT))+
geom_boxplot()+
theme_minimal()+
labs(title = "Boxplot showing the differences in RT among subjects - young adults group")+
theme(axis.text.x = element_text(angle = 45))
args(clean.subj.group)
clean.subj.group(subj.var = subject,
RT.var = RT_clean,
N.sd = 2,
data = data_Stroop_RT,
groupping = TRUE,
group.var = group)
which_to_remove <- clean.subj.group(subj.var = subject,
RT.var = RT_clean,
N.sd = 2,
data = data_Stroop_RT,
groupping = TRUE,
group.var = group)
args(exp_plots_LMM)
exp_plots_LMM(data = data_Stroop_RT,
DV = data_Stroop_RT$RT_clean,
ID = data_Stroop_RT$subject,
class = data_Stroop_RT$item.color)
library(lme4)
library(lmerTest)
my_model <- lmer(RT_clean ~ trigger*group + (1|subject)+(1|item.color), data = data_Stroop_RT)
anova(my_model)
summary(my_model)
args(LMM_check)
LMM_check(my_model)
args(ICC_ranef)
ICC_ranef(my_model)
mod_0 <- lmer(RT_clean~ 1 + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
mod_1 <- lmer(RT_clean~ trigger + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
mod_2 <- lmer(RT_clean~ group + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
mod_3 <- lmer(RT_clean~ trigger+group + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
my_model <- lmer(RT_clean ~ trigger*group + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
args(mod_fitting)
list_models <- list(m0 = mod_0, m1 = mod_1, m2 = mod_2, m3 = mod_3, m4 = my_model)
mod_fitting(list_models)
args(cross_anova_models)
cross_anova_models(list_models)
args(std_error)
std_error(data_Stroop_RT$CR)
args(round_df)
round_df(data_Stroop_RT, 2)
args(convert.eph.ep)
convert.eph.ep("convert.ep.eph/eph_to_convert_to_ep.eph")
install.packages("readr")
library(knitr)
library(NPL)
citation("NPL")
library(readxl)
data_Stroop_RT <- read_excel("data_Stroop_RT.xlsx")
data_Stroop_RT$trigger <- as.character(data_Stroop_RT$trigger) # To fcilitate the analyses
data_Stroop_RT$group <- as.character(data_Stroop_RT$group)# To fcilitate the analyses
str(data_Stroop_RT)
library(dplyr)
data_Stroop_RT <- data_Stroop_RT%>%
mutate(RT = ifelse(RT > 200, RT, NA))
library(ggplot2)
med_RT <- median(data_Stroop_RT$RT, na.rm = T)
moy_RT <- mean(data_Stroop_RT$RT, na.rm = T)
ggplot(data_Stroop_RT, aes(x = RT))+
geom_density(fill = "dodgerblue", alpha = 0.3, size = 1)+
geom_vline(xintercept = med_RT, linetype = 2)+
geom_vline(xintercept = moy_RT)+
theme_minimal()+
labs(title = "Distribution of the RT variable")
args(clean.sd)
clean.sd(df.var.val = data_Stroop_RT$RT,
df.var.group = data_Stroop_RT$group,
n.sd = 1.5,
data = data_Stroop_RT,
fill = NA)
data_Stroop_RT$RT_clean <- clean.val
rm(clean.val)
str(data_Stroop_RT)
med_RT <- median(data_Stroop_RT$RT_clean, na.rm = T)
moy_RT <- mean(data_Stroop_RT$RT_clean, na.rm = T)
ggplot(data_Stroop_RT, aes(x = RT_clean))+
geom_density(fill = "dodgerblue", alpha = 0.3, size = 1)+
geom_vline(xintercept = med_RT, linetype = 2)+
geom_vline(xintercept = moy_RT)+
theme_minimal()+
labs(title = "Distribution of the RT variable")
data_Stroop_RT%>%
filter(group == "20_30")%>%
ggplot(aes(x = subject, y = RT))+
geom_boxplot()+
theme_minimal()+
labs(title = "Boxplot showing the differences in RT among subjects - young adults group")+
theme(axis.text.x = element_text(angle = 45))
args(clean.subj.group)
clean.subj.group(subj.var = subject,
RT.var = RT_clean,
N.sd = 2,
data = data_Stroop_RT,
groupping = TRUE,
group.var = group)
which_to_remove <- clean.subj.group(subj.var = subject,
RT.var = RT_clean,
N.sd = 2,
data = data_Stroop_RT,
groupping = TRUE,
group.var = group)
args(exp_plots_LMM)
exp_plots_LMM(data = data_Stroop_RT,
DV = data_Stroop_RT$RT_clean,
ID = data_Stroop_RT$subject,
class = data_Stroop_RT$item.color)
library(lme4)
library(lmerTest)
my_model <- lmer(RT_clean ~ trigger*group + (1|subject)+(1|item.color), data = data_Stroop_RT)
anova(my_model)
summary(my_model)
args(LMM_check)
LMM_check(my_model)
args(ICC_ranef)
ICC_ranef(my_model)
mod_0 <- lmer(RT_clean~ 1 + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
mod_1 <- lmer(RT_clean~ trigger + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
mod_2 <- lmer(RT_clean~ group + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
mod_3 <- lmer(RT_clean~ trigger+group + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
my_model <- lmer(RT_clean ~ trigger*group + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
args(mod_fitting)
list_models <- list(m0 = mod_0, m1 = mod_1, m2 = mod_2, m3 = mod_3, m4 = my_model)
mod_fitting(list_models)
args(cross_anova_models)
cross_anova_models(list_models)
args(std_error)
std_error(data_Stroop_RT$CR)
args(round_df)
round_df(data_Stroop_RT, 2)
args(convert.eph.ep)
convert.eph.ep("convert.ep.eph/eph_to_convert_to_ep.eph")
library(knitr)
library(NPL)
citation("NPL")
library(readxl)
data_Stroop_RT <- read_excel("data_Stroop_RT.xlsx")
data_Stroop_RT$trigger <- as.character(data_Stroop_RT$trigger) # To fcilitate the analyses
data_Stroop_RT$group <- as.character(data_Stroop_RT$group)# To fcilitate the analyses
str(data_Stroop_RT)
library(dplyr)
data_Stroop_RT <- data_Stroop_RT%>%
mutate(RT = ifelse(RT > 200, RT, NA))
library(ggplot2)
med_RT <- median(data_Stroop_RT$RT, na.rm = T)
moy_RT <- mean(data_Stroop_RT$RT, na.rm = T)
ggplot(data_Stroop_RT, aes(x = RT))+
geom_density(fill = "dodgerblue", alpha = 0.3, size = 1)+
geom_vline(xintercept = med_RT, linetype = 2)+
geom_vline(xintercept = moy_RT)+
theme_minimal()+
labs(title = "Distribution of the RT variable")
args(clean.sd)
clean.sd(df.var.val = data_Stroop_RT$RT,
df.var.group = data_Stroop_RT$group,
n.sd = 1.5,
data = data_Stroop_RT,
fill = NA)
data_Stroop_RT$RT_clean <- clean.val
rm(clean.val)
str(data_Stroop_RT)
med_RT <- median(data_Stroop_RT$RT_clean, na.rm = T)
moy_RT <- mean(data_Stroop_RT$RT_clean, na.rm = T)
ggplot(data_Stroop_RT, aes(x = RT_clean))+
geom_density(fill = "dodgerblue", alpha = 0.3, size = 1)+
geom_vline(xintercept = med_RT, linetype = 2)+
geom_vline(xintercept = moy_RT)+
theme_minimal()+
labs(title = "Distribution of the RT variable")
data_Stroop_RT%>%
filter(group == "20_30")%>%
ggplot(aes(x = subject, y = RT))+
geom_boxplot()+
theme_minimal()+
labs(title = "Boxplot showing the differences in RT among subjects - young adults group")+
theme(axis.text.x = element_text(angle = 45))
args(clean.subj.group)
clean.subj.group(subj.var = subject,
RT.var = RT_clean,
N.sd = 2,
data = data_Stroop_RT,
groupping = TRUE,
group.var = group)
which_to_remove <- clean.subj.group(subj.var = subject,
RT.var = RT_clean,
N.sd = 2,
data = data_Stroop_RT,
groupping = TRUE,
group.var = group)
args(exp_plots_LMM)
exp_plots_LMM(data = data_Stroop_RT,
DV = data_Stroop_RT$RT_clean,
ID = data_Stroop_RT$subject,
class = data_Stroop_RT$item.color)
library(lme4)
library(lmerTest)
my_model <- lmer(RT_clean ~ trigger*group + (1|subject)+(1|item.color), data = data_Stroop_RT)
anova(my_model)
summary(my_model)
args(LMM_check)
LMM_check(my_model)
args(ICC_ranef)
ICC_ranef(my_model)
mod_0 <- lmer(RT_clean~ 1 + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
mod_1 <- lmer(RT_clean~ trigger + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
mod_2 <- lmer(RT_clean~ group + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
mod_3 <- lmer(RT_clean~ trigger+group + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
my_model <- lmer(RT_clean ~ trigger*group + (1|subject)+(1|item.color), data = data_Stroop_RT, REML = FALSE)
args(mod_fitting)
list_models <- list(m0 = mod_0, m1 = mod_1, m2 = mod_2, m3 = mod_3, m4 = my_model)
mod_fitting(list_models)
args(cross_anova_models)
cross_anova_models(list_models)
args(std_error)
std_error(data_Stroop_RT$CR)
args(round_df)
round_df(data_Stroop_RT, 2)
args(convert.eph.ep)
convert.eph.ep("convert.ep.eph/eph_to_convert_to_ep.eph")
plot_microstates <- function(path_.seg, vline_onset = FALSE, time_ms = NULL, size_hist = 2, palette = "default", scale = "automatic"){
# require(ggplot2)
# require(ggpubr)
# require(RColorBrewer)
# require(readr)
# require(dplyr)
# require(NPL)
# require(readxl)
# Importation of the data
data_ms <- read_seg_file(path_.seg)
# Offer the possibility to the user to add a column with the time in ms
if(is.double(time_ms)){
data_ms$time <- time_ms
}
# Definition of the colors
if (palette == "default"){
maps_numbers <- 1:40
colors <- c("darkgreen",      "coral1",
"cornflowerblue",  "chartreuse3",
"cyan4",           "dodgerblue3",
"firebrick3",      "forestgreen",
"darkorange2",     "darkorchid",
"darkred",         "darkseagreen2",
"darkslategray2",  "deeppink3",
"gold2",           "darkolivegreen2",
"darkmagenta",     "deepskyblue2",
"aquamarine3",     "burlywood4",
"cadetblue4",      "blue3",
"darkslateblue",   "gray54",
"lightblue2",      "lightgoldenrod2",
"lightsalmon2",    "mediumpurple2",
"navyblue",        "magenta3",
"steelblue2",      "tan2",
"yellowgreen",     "turquoise4",
"royalblue2",      "red4",
"lightsteelblue2", "plum4",
"mediumvioletred", "mediumseagreen")
color_reference <- data.frame(maps_numbers, colors)
color_reference$colors <- as.character(color_reference$colors)
color_reference$maps_numbers <- as.character(color_reference$maps_numbers)
} else if(palette == "alternative"){
maps_numbers <- 40:1
colors <- c("darkgreen",      "coral1",
"cornflowerblue",  "chartreuse3",
"cyan4",           "dodgerblue3",
"firebrick3",      "forestgreen",
"darkorange2",     "darkorchid",
"darkred",         "darkseagreen2",
"darkslategray2",  "deeppink3",
"gold2",           "darkolivegreen2",
"darkmagenta",     "deepskyblue2",
"aquamarine3",     "burlywood4",
"cadetblue4",      "blue3",
"darkslateblue",   "gray54",
"lightblue2",      "lightgoldenrod2",
"lightsalmon2",    "mediumpurple2",
"navyblue",        "magenta3",
"steelblue2",      "tan2",
"yellowgreen",     "turquoise4",
"royalblue2",      "red4",
"lightsteelblue2", "plum4",
"mediumvioletred", "mediumseagreen")
color_reference <- data.frame(maps_numbers, colors)
color_reference$colors <- as.character(color_reference$colors)
color_reference$maps_numbers <- as.character(color_reference$maps_numbers)
} else {
color_reference <- read_excel(palette)
names(color_reference)[1] <- "maps_numbers"
names(color_reference)[2] <- "colors"
color_reference$colors <- as.character(color_reference$colors)
color_reference$maps_numbers <- as.character(color_reference$maps_numbers)
}
# List of plots
ncol_data <- ncol(data_ms)
n_conditions <- (ncol_data-1)/5
plot_list <- list()
index_col_GFP <- grep("GFP", colnames(data_ms))
index_col_Seg <- grep("Seg", colnames(data_ms))
# Creation of the data frame by extracting the relevant information for each plot and plotting according to the parameters entered as argument.
if(time_ms == NULL){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
maps <- distinct(data_plot, Maps)
maps <- maps%>%filter(!is.na(Maps))%>%arrange(Maps)
maps$Maps <- as.character(maps$Maps)
palette <- maps%>%left_join(color_reference, by = c("Maps" = "maps_numbers"))%>%select(colors)
palette <- palette$colors
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = expression(paste("Amplitude in ", mu,"V", sep = "")))+
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 12))+
scale_color_manual(values=palette)
if(is.double(scale)){
plot_list[[i]] <- plot_list[[i]]+scale_y_continuous(limits = scale)
}
}
} else{
if(vline_onset == TRUE){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
maps <- distinct(data_plot, Maps)
maps <- maps%>%filter(!is.na(Maps))%>%arrange(Maps)
maps$Maps <- as.character(maps$Maps)
palette <- maps%>%left_join(color_reference, by = c("Maps" = "maps_numbers"))%>%select(colors)
palette <- palette$colors
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = expression(paste("Amplitude in ", mu,"V", sep = "")))+
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 12))+
scale_color_manual(values=palette)
rm(data_plot, maps, palette)
if(is.double(scale)){
plot_list[[i]] <- plot_list[[i]]+scale_y_continuous(limits = scale)
}
}
} else if (vline_onset == FALSE) {
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
maps <- distinct(data_plot, Maps)
maps <- maps%>%filter(!is.na(Maps))%>%arrange(Maps)
maps$Maps <- as.character(maps$Maps)
palette <- maps%>%left_join(color_reference, by = c("Maps" = "maps_numbers"))%>%select(colors)
palette <- palette$colors
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
#geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = expression(paste("Amplitude in ", mu,"v", sep = "")))+
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 12))+
scale_color_manual(values=palette)
if(is.double(scale)){
plot_list[[i]] <- plot_list[[i]]+scale_y_continuous(limits = scale)
}
}
}
}
#output
return(plot_list)
}
library(NPL)
library(NPL)
library(NPL)
library(NPL)
library(NPL)
remove.packages("NPL")
library(NPL)
